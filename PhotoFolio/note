import { useEffect, useRef, useState } from "react";
import styles from "./userAlbum.module.css";
import { doc, addDoc, collection, query, where, getDocs, deleteDoc, updateDoc } from "firebase/firestore";
import { db } from "../../firebase";

export default function UserAlbum({ selectedAlbum, handleBack }) {
  const [imageName, setImageName] = useState({ imgTitle: "", imgLink: "" });
  const [images, setImages] = useState([]);
  const [showSearchInput, setShowSearchInput] = useState(false);
  const [showUploadForm, setShowUploadForm] = useState(false);
  const [selectedImageIndex, setSelectedImageIndex] = useState(null);
  const inputRef = useRef(null);
  const [editImage, setEditImage] = useState(null);

  async function fetchImagesByAlbum(albumId) {
    if (!albumId) return;
    try {
      const q = query(collection(db, "album_images"), where("albumId", "==", albumId));
      const querySnapshot = await getDocs(q);
      const fetchedImages = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setImages(fetchedImages);
    } catch (error) {
      console.error("Error fetching images:", error);
    }
  }

  useEffect(() => {
    fetchImagesByAlbum(selectedAlbum);
  }, [selectedAlbum]);

  function handleSearchInput() {
    setShowSearchInput((prev) => !prev);
  }

  useEffect(() => {
    if (showSearchInput) {
      inputRef.current.focus();
    }
  }, [showSearchInput]);

  function handleUploadForm() {
    setShowUploadForm((prev) => !prev);
    setEditImage(null);
    setImageName({ imgTitle: "", imgLink: "" });
  }

  const deleteImg = async (id) => {
    const docRef = doc(db, "album_images", id);
    await deleteDoc(docRef);
    setImages(images.filter((image) => image.id !== id));
  };

  async function addOrUpdateImage(e) {
    e.preventDefault();
    if (!imageName.imgTitle || !imageName.imgLink) return;

    if (editImage) {
      const docRef = doc(db, "album_images", editImage.id);
      await updateDoc(docRef, {
        img_name: imageName.imgTitle,
        img: imageName.imgLink,
      });
      setImages(images.map((img) => (img.id === editImage.id ? { ...img, img_name: imageName.imgTitle, img: imageName.imgLink } : img)));
      setEditImage(null);
    } else {
      const newImage = {
        img_name: imageName.imgTitle,
        img: imageName.imgLink,
        albumId: selectedAlbum,
      };
      const docRef = await addDoc(collection(db, "album_images"), newImage);
      setImages([{ id: docRef.id, ...newImage }, ...images]);
    }
    setImageName({ imgTitle: "", imgLink: "" });
    setShowUploadForm(false);
  }

   setSelectedImageIndex(index);
  }

  function handleNextImage() {
    setSelectedImageIndex((prevIndex) => (prevIndex + 1) % images.length);
  }

  function handlePrevImage() {
    setSelectedImageIndex((prevIndex) => (prevIndex - 1 + images.length) % images.length);
  }

  function closeImageViewer() {
     function handleImageClick(index) {
  setSelectedImageIndex(null);
  }

  return (
    <div className={styles.albumDetails}>
      {showUploadForm && (
        <UploadImage
          selectedAlbum={selectedAlbum}
          addOrUpdateImage={addOrUpdateImage}
          imageName={imageName}
          setImageName={setImageName}
          editImage={editImage}
        />
      )}

      <div className={styles.photoContainer}>
        <div className={styles.photoContainerHead}>
          <div style={{ display: "flex" }}>
            <button className={styles.backBtn} onClick={handleBack}>
              <img src="back.png" alt="back btn" />
            </button>
            <h2 className={styles.photoTitle}>Images in {selectedAlbum}</h2>
          </div>
        </div>
        <div className={styles.searchBar}>
          {showSearchInput && <input placeholder="Search..." ref={inputRef} />}
          <img
            src={showSearchInput ? "close.png" : "search.png"}
            alt="search Icon"
            className={styles.searchImg}
            onClick={handleSearchInput}
          />
          <button className={styles.addImagesBtn} onClick={handleUploadForm}>
            {showUploadForm ? "Cancel" : "Add Image"}
          </button>
        </div>
      </div>

      <div className={styles.imageCardContainer}>
        {images.length > 0 ? (
          images.map((img, index) => (
            <div key={img.id}>
              <div className={styles.updateDaleteContainer}>
                <img src="updateIcon.png" alt="updateIcon" onClick={() => { setEditImage(img); setShowUploadForm(true); setImageName({ imgTitle: img.img_name, imgLink: img.img }); }} />
                <img className={styles.deleteIcon} src="deleteIcon.png" alt="deleteIcon" onClick={() => deleteImg(img.id)} />
              </div>
              <div className={styles.imageCard} onClick={() => handleImageClick(index)}>
                <img src={img.img} alt={img.img_name} />
                <p>{img.img_name}</p>
              </div>
            </div>
          ))
        ) : (
          <p>No images added yet.</p>
        )}
      </div>

      {selectedImageIndex !== null && (
        <div className={styles.imageViewer}>
          <button className={styles.navButton} onClick={handlePrevImage}>&lt;</button>
          <img src={images[selectedImageIndex].img} alt={images[selectedImageIndex].img_name} className={styles.largeImage} />
          <button className={styles.navButton} onClick={handleNextImage}>&gt;</button>
          <button className={styles.closeButton} onClick={closeImageViewer}>X</button>
        </div>
      )}
    </div>
  );
}

function UploadImage({ editImage, addOrUpdateImage, imageName, setImageName }) {
  return (
    <form onSubmit={addOrUpdateImage} className={styles.imageUploadContainer}>
      <h2>{editImage ? "Update Image" : "Add Image"}</h2>
      <input
        placeholder="Title"
        value={imageName.imgTitle}
        onChange={(e) => setImageName({ ...imageName, imgTitle: e.target.value })}
      />
      <input
        placeholder="Image URL"
        value={imageName.imgLink}
        onChange={(e) => setImageName({ ...imageName, imgLink: e.target.value })}
      />
      <div className={styles.buttons}>
        <button type="button" className={styles.clearBtn} onClick={() => setImageName({ imgTitle: "", imgLink: "" })}>
          Clear
        </button>
        <button type="submit" className={styles.createBtn}>
          {editImage ? "Update" : "Add"}
        </button>
      </div>
    </form>
  );
}